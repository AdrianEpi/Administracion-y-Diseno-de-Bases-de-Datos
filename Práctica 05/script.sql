/*
* @Authors:
 *           Jorge Acevedo
 *           Javier Martín
 *           Sergio Tabares
 *           Adrián Epifanio
*
* @Date:   2021-10-29 15:59:49
* @Last Modified time: 2021-11-13 17:54:18
*/
-- MySQL Script generated by MySQL Workbench
-- Fri Oct  29 15:59:49 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering



DROP TABLE IF EXISTS ClienteCompraEmpleadoProducto ;
DROP TABLE IF EXISTS Producto ;
DROP TABLE IF EXISTS Empleado ;
DROP TABLE IF EXISTS EmpleadoTrabajaZona ;
DROP TABLE IF EXISTS Cliente ;
DROP TABLE IF EXISTS Zona ;
DROP TABLE IF EXISTS Vivero ;

DROP FUNCTION IF EXISTS crear_email;
DROP FUNCTION IF EXISTS comprobar_zona;
DROP FUNCTION IF EXISTS actualizar_Stock;

/*===============================================================================
=                                   Vivero                                      =
===============================================================================*/
-- --------------------------------------
-- Table Vivero
-- --------------------------------------
DROP TABLE IF EXISTS Vivero ;
CREATE TABLE IF NOT EXISTS Vivero (
  Nombre VARCHAR(30) NOT NULL,
  Latitud DECIMAL NULL,
  Longitud DECIMAL NULL,
  Localidad VARCHAR(45) NULL,
  PRIMARY KEY (Nombre));

-- --------------------------------------
-- Data for table Vivero
-- --------------------------------------
INSERT INTO Vivero (Nombre, Latitud, Longitud, Localidad) VALUES ('Vivero La Laguna', 5, 21, 'La Laguna');
INSERT INTO Vivero (Nombre, Latitud, Longitud, Localidad) VALUES ('Vivero Santa Cruz', 14, 74, 'Santa Cruz de Tenerife');



/*===============================================================================
=                                   Zona                                        =
===============================================================================*/
-- --------------------------------------
-- Table Zona
-- --------------------------------------
DROP TABLE IF EXISTS Zona ;
CREATE TABLE IF NOT EXISTS Zona (
  Codigo INT NOT NULL,
  Nombre VARCHAR(50) NOT NULL,
  Vivero_Nombre VARCHAR(30) NOT NULL,
  PRIMARY KEY (Codigo),
  UNIQUE (Codigo),
  CONSTRAINT fk_Zona_Vivero
    FOREIGN KEY (Vivero_Nombre)
    REFERENCES Vivero (Nombre)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- --------------------------------------
-- Data for table Zona
-- --------------------------------------
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0101, 'Almacén', 'Vivero La Laguna');
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0102, 'Cajas', 'Vivero La Laguna');
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0103, 'Exterior', 'Vivero La Laguna');
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0203, 'Exterior', 'Vivero Santa Cruz');
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0202, 'Cajas', 'Vivero Santa Cruz');
INSERT INTO Zona (Codigo, Nombre, Vivero_Nombre) VALUES (0201, 'Almacén', 'Vivero Santa Cruz');



/*===============================================================================
=                                   Cliente                                     =
===============================================================================*/
-- --------------------------------------
-- Table Cliente
-- --------------------------------------
DROP TABLE IF EXISTS Cliente ;
CREATE TABLE IF NOT EXISTS Cliente (
  DNI VARCHAR(9) NOT NULL,
  Nombre VARCHAR(20) NOT NULL,
  Apellido1 VARCHAR(20) NOT NULL,
  Apellido2 VARCHAR(20) NOT NULL,
  Email VARCHAR(100) NULL,
  Bonificacion DECIMAL NULL,
  Total_mensual DECIMAL NULL,
  PRIMARY KEY (DNI));

-- --------------------------------------
-- Function crear_email
-- Crear un procedimiento 'crear_email' devuelva una dirección de correo electrónico compuesta por el nombre, los apellidos, el carácter '@' y un dominio pasádo como parámetro.
-- --------------------------------------
DROP FUNCTION IF EXISTS crear_email;
CREATE OR REPLACE FUNCTION crear_email() RETURNS TRIGGER AS $crear_email$
  DECLARE newEmail VARCHAR(100);
  BEGIN
    IF ((new.Email NOT LIKE '^[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$') AND
        (new.Email IS NOT NULL)) THEN
      RAISE EXCEPTION 'El correo no es valido';
    END IF;

    IF new.Email IS NULL THEN
      new.Email := CONCAT(
        LOWER(new.Nombre),
        LOWER(new.Apellido1),
        LOWER(new.Apellido2),
        '@',
        LOWER(TG_ARGV[0])
      );
    END IF;

    RETURN NEW;
  END;
$crear_email$ LANGUAGE plpgsql;

-- --------------------------------------
-- Trigger trigger_crear_email_before_insert
-- Crear un disparador que permita crear una dirección de correo electrónico en el caso de que no se disponga ya de una.
-- --------------------------------------
CREATE TRIGGER trigger_crear_email_before_insert
  BEFORE INSERT ON Cliente
  FOR EACH ROW EXECUTE PROCEDURE crear_email('ull.edu.es');

-- --------------------------------------
-- Data for table Cliente
-- --------------------------------------
INSERT INTO Cliente (DNI, Nombre, Apellido1, Apellido2, Bonificacion, Total_mensual) VALUES ('23456789A', 'Pedro', 'Pica', 'Piedra', NULL, NULL);
INSERT INTO Cliente (DNI, Nombre, Apellido1, Apellido2, Bonificacion, Total_mensual) VALUES ('23456789B', 'Vilma', 'Pica', 'Piedra', NULL, NULL);



/*===============================================================================
=                             EmpleadoTrabajaZona                               =
===============================================================================*/
-- --------------------------------------
-- Table EmpleadoTrabajaZona
-- --------------------------------------
DROP TABLE IF EXISTS EmpleadoTrabajaZona ;
CREATE TABLE IF NOT EXISTS EmpleadoTrabajaZona (
  Fecha_Inicio DATE NOT NULL,
  Fecha_Fin DATE NOT NULL,
  Ventas INT NULL,
  Zona_Codigo INT NOT NULL,
  PRIMARY KEY (Fecha_Inicio, Zona_Codigo),
  CONSTRAINT fk_EmpleadoTrabajaZona_Zona
    FOREIGN KEY (Zona_Codigo)
    REFERENCES Zona (Codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- --------------------------------------
-- Data for table EmpleadoTrabajaZona
-- --------------------------------------
INSERT INTO EmpleadoTrabajaZona (Fecha_Inicio, Fecha_Fin, Ventas, Zona_Codigo) VALUES ('01/01/2019', '01/01/2021', NULL, 0101);
INSERT INTO EmpleadoTrabajaZona (Fecha_Inicio, Fecha_Fin, Ventas, Zona_Codigo) VALUES ('03/01/2020', '03/01/2021', NULL, 0102);
INSERT INTO EmpleadoTrabajaZona (Fecha_Inicio, Fecha_Fin, Ventas, Zona_Codigo) VALUES ('02/01/2017', '02/01/2021', NULL, 0203);



/*===============================================================================
=                                   Empleado                                    =
===============================================================================*/
-- --------------------------------------
-- Table Empleado
-- --------------------------------------
DROP TABLE IF EXISTS Empleado ;
CREATE TABLE IF NOT EXISTS Empleado (
  Css VARCHAR(45) NOT NULL,
  Sueldo DECIMAL NOT NULL,
  Antiguedad INT NOT NULL,
  DNI VARCHAR(9) NOT NULL,
  EmpleadoTrabajaZona_Fecha_Inicio DATE NOT NULL,
  EmpleadoTrabajaZona_Zona_Codigo INT NOT NULL,
  PRIMARY KEY (DNI),
  CONSTRAINT fk_Empleado_EmpleadoTrabajaZona
    FOREIGN KEY (EmpleadoTrabajaZona_Fecha_Inicio, EmpleadoTrabajaZona_Zona_Codigo)
    REFERENCES EmpleadoTrabajaZona (Fecha_Inicio, Zona_Codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- --------------------------------------
-- Function comprobar_zona
-- --------------------------------------
DROP FUNCTION IF EXISTS comprobar_zona;
CREATE OR REPLACE FUNCTION comprobar_zona() RETURNS TRIGGER AS $comprobar_zona$
  BEGIN
    IF EXISTS(SELECT * FROM Empleado WHERE (
          Empleado.EmpleadoTrabajaZona_Zona_Codigo = new.EmpleadoTrabajaZona_Zona_Codigo
        )) THEN
      RAISE EXCEPTION 'No pueden trabajar en la misma zona';
    END IF;

    RETURN NEW;
  END;
$comprobar_zona$ LANGUAGE plpgsql;

-- --------------------------------------
-- Trigger trigger_Empleado_Trabaja_Una_zona
-- Crear un disparador que permita verificar que en cada zona de un vivero no pueden trabajar dos personas diferentes.
-- --------------------------------------
CREATE TRIGGER trigger_Empleado_Trabaja_Una_zona
  BEFORE INSERT ON Empleado
    FOR EACH ROW EXECUTE PROCEDURE comprobar_zona();
END;

-- --------------------------------------
-- Data for table Empleado
-- --------------------------------------
INSERT INTO Empleado (Css, Sueldo, Antiguedad, DNI, EmpleadoTrabajaZona_Fecha_Inicio, EmpleadoTrabajaZona_Zona_Codigo) VALUES ('XXXX123456789012', 1200, 2, '12345678A', '01/01/2019', 0101);
INSERT INTO Empleado (Css, Sueldo, Antiguedad, DNI, EmpleadoTrabajaZona_Fecha_Inicio, EmpleadoTrabajaZona_Zona_Codigo) VALUES ('XXXZ123456789012', 1150, 1, '12345678B', '03/01/2020', 0102);
INSERT INTO Empleado (Css, Sueldo, Antiguedad, DNI, EmpleadoTrabajaZona_Fecha_Inicio, EmpleadoTrabajaZona_Zona_Codigo) VALUES ('XXXY123456789012', 1300, 4, '12345678C', '02/01/2017', 0203);



/*===============================================================================
=                                   Producto                                    =
===============================================================================*/
-- --------------------------------------
-- Table Producto
-- --------------------------------------
DROP TABLE IF EXISTS Producto ;
CREATE TABLE IF NOT EXISTS Producto (
  Codigo_Producto INT NOT NULL,
  Precio DECIMAL NOT NULL,
  Stock INT NULL,
  Zona_Codigo INT NOT NULL,
  PRIMARY KEY (Codigo_Producto, Zona_Codigo),
  CONSTRAINT fk_Producto_Zona
    FOREIGN KEY (Zona_Codigo)
    REFERENCES Zona (Codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- --------------------------------------
-- Data for table Producto
-- --------------------------------------
INSERT INTO Producto (Codigo_Producto, Precio, Stock, Zona_Codigo) VALUES (0001, 15.99, 10, 0101);
INSERT INTO Producto (Codigo_Producto, Precio, Stock, Zona_Codigo) VALUES (0002, 12.36, 7, 0101);
INSERT INTO Producto (Codigo_Producto, Precio, Stock, Zona_Codigo) VALUES (0003, 9.45, 4, 0202);
INSERT INTO Producto (Codigo_Producto, Precio, Stock, Zona_Codigo) VALUES (0004, 2.36, 1, 0203);



/*===============================================================================
=                       ClienteCompraEmpleadoProducto                           =
===============================================================================*/
-- --------------------------------------
-- Table ClienteCompraEmpleadoProducto
-- --------------------------------------
DROP TABLE IF EXISTS ClienteCompraEmpleadoProducto ;
CREATE TABLE IF NOT EXISTS ClienteCompraEmpleadoProducto (
  Cantidad INT NOT NULL,
  Fecha DATE NOT NULL,
  Empleado_DNI VARCHAR(9) NOT NULL,
  Producto_Codigo_Producto INT NOT NULL,
  Producto_Zona_Codigo INT NOT NULL,
  Cliente_DNI VARCHAR(9) NOT NULL,
  PRIMARY KEY (Fecha, Empleado_DNI, Producto_Codigo_Producto, Producto_Zona_Codigo, Cliente_DNI),
  CONSTRAINT fk_ClienteCompraEmpleadoProducto_Empleado
    FOREIGN KEY (Empleado_DNI)
    REFERENCES Empleado (DNI)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_ClienteCompraEmpleadoProducto_Producto
    FOREIGN KEY (Producto_Codigo_Producto, Producto_Zona_Codigo)
    REFERENCES Producto (Codigo_Producto, Zona_Codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_ClienteCompraEmpleadoProducto_Cliente
    FOREIGN KEY (Cliente_DNI)
    REFERENCES Cliente (DNI)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- --------------------------------------
-- Function actualizar_Stock
-- --------------------------------------
DROP FUNCTION IF EXISTS actualizar_Stock;
CREATE OR REPLACE FUNCTION actualizar_Stock()
    RETURNS TRIGGER AS $actualizar_Stock$
  BEGIN
    IF EXISTS(SELECT * FROM Producto WHERE (
        (Producto.Codigo_Producto = new.Producto_Codigo_Producto) AND
        (Producto.Zona_Codigo = new.Producto_Zona_Codigo) AND
        (Producto.Stock >= new.Cantidad))) THEN
      UPDATE Producto SET Stock = (Producto.Stock - new.Cantidad) WHERE (
          (Producto.Codigo_Producto = new.Producto_Codigo_Producto) AND
          (Producto.Zona_Codigo = new.Producto_Zona_Codigo) AND
          (Producto.Stock >= new.Cantidad));
    END IF;

    RETURN NEW;
  END;
$actualizar_Stock$ LANGUAGE plpgsql;

-- --------------------------------------
-- Trigger trigger_actualizar_stock
-- Crear un disparador que permita mantener actualizado el stock de la base de datos de viveros.
-- --------------------------------------
CREATE TRIGGER trigger_actualizar_stock
  BEFORE INSERT ON ClienteCompraEmpleadoProducto
    FOR EACH ROW EXECUTE PROCEDURE actualizar_Stock();
END;

-- --------------------------------------
-- Data for table ClienteCompraEmpleadoProducto
-- --------------------------------------
-- INSERT INTO ClienteCompraEmpleadoProducto (Cantidad, Fecha, Empleado_DNI, Producto_Codigo_Producto, Producto_Zona_Codigo, Cliente_DNI) VALUES (2, '04/04/2020', '12345678A', 0001, 0101, '23456789A');
-- Moví el insert para que se viese la actualización del stock del producto al realizar la compra


SELECT * FROM Vivero;
SELECT * FROM Zona;
SELECT * FROM EmpleadoTrabajaZona;
SELECT * FROM Cliente;
SELECT * FROM Producto;
INSERT INTO ClienteCompraEmpleadoProducto (Cantidad, Fecha, Empleado_DNI, Producto_Codigo_Producto, Producto_Zona_Codigo, Cliente_DNI) VALUES (2, '04/04/2020', '12345678A', 0001, 0101, '23456789A');
SELECT * FROM Producto;
/* Tablas grandes (extender terminal para ver completas)
SELECT * FROM Empleado;
SELECT * FROM ClienteCompraEmpleadoProducto;
*/
